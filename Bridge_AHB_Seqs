class ahb_seqs extends uvm_sequence #(ahb_txn);
`uvm_object_utils(ahb_seqs)
extern function new(string name="ahb_seqs");
extern task body();
endclass

//____________________________endclass-------------------------------//

function ahb_seqs::new(string name="ahb_seqs");
super.new(name);
endfunction
task ahb_seqs::body();
logic [2:0] sburst;
logic [31:0] saddr;
logic [2:0] ssize;
logic [3:0]srep=0;
bit [4:0] data_bytes;
logic [31:0]result;
integer total=0;
integer align=0;
begin
super.body();

//creating sequence object
//First Transaction of type Htrans=Non Sequential
req=ahb_txn::type_id::create("req");
start_item(req);
assert(req.randomize with {htrans =='b10; hburst==3; hsize==2;});
finish_item(req);

//Now based on the Hburst value I will check whether its a wrapping burst or incremental burst and calculate the Haddr

sburst=req.hburst;
saddr=req.haddr;
ssize=req.hsize;
data_bytes=((2**(ssize+3))/8);

case(sburst)
            3'b000:srep=0;
            3'b010:begin
                    total=data_bytes*4;
                    align=$clog2(total);
                    srep=3;
                    end

             3'b011:srep=3;

             3'b100:begin
                    total=data_bytes*8;
                    align=$clog2(total);
                    srep=7;
                    end

             3'b101:srep=7;

             3'b110:begin
                    total=data_bytes*16;
                    align=$clog2(total);
                    srep=15;
                    end
  
             3'b111:srep=15;

             default:begin
                     align=0;
                     end
 endcase
//Based on Hburst value I have calculted how many times my loop will run 
 for(int i=0;i<srep;i++)
     begin
     result=saddr+data_bytes;
      if(align)
      begin
      for(int j=align;j<31;j++)
        begin
        if(result[j]!=saddr[j])
        begin
        result[j]=result[j]^1'b1;
        end
       end
      end
      
 saddr=result;
 
 req=ahb_txn::type_id::create("req");
 start_item(req);
 assert(req.randomize with {htrans=='b11; hwrite==1; hburst==sburst; hsize==ssize; haddr==saddr;});
 finish_item(req);
 end
 
 //Incase we need to check the address is wrapped or not for the next transfer
 //I am calculating one more address here but not going to pass as a sequence item 
 result=saddr+data_bytes;
 if(align)begin
 for(int j=align;j<31;j++)
 begin
 if(result[j]!=saddr[j])
 result[j]=result[j]^1'b1;
 end
 end
 $display("Address for the next transaction after last transfer =%d",result);

//Ideal Transfer at the End
 req=ahb_txn::type_id::create("req");
start_item(req);
 assert(req.randomize with {htrans=='b00;});
 finish_item(req);
 end
 endtask
